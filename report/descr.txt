- Η υλοποίηση μας δεν παρέχει κάποιον μηχανισμό για την προσομοίωση του χρόνου.
  Παραδείγματος χάρην, στον "Έμπορο του Μήνα" δεν κάνουμε κάτι για το "κάθε μήνα
  η CCC εκδίδει μια [...] "
- Κάτι που πρέπει να προσέξετε είναι ότι σε κάθε αγορά η τράπεζα τραβάει κατευθείαν
  την προμήθεια από τον έμπορο, αντί να χρωστάει ο έμπορος στην τράπεζα. Συνεπώς,
  ο "Έμπορος του Μήνα" κερδίζει μία έκπτωση της τάξης των 5% στην υπάρχουσα προμήθειά
  του (%).
- Επίσης, δεν υποστηρίζουμε κάποιο 'admin-page' για να αναθέτουμε Companies σε
  Individuals, αλλά, το κάνουμε χειροκίνητα μέσω άμεσης επικοινωνίας με τη βάση.
- Η εργασία μας θα μπορούσε να υλοποιηθεί σίγουρα με μία καλύτερη προσέγγιση στις
  αρχές του Αντικειμενοστραφή Προγραμματισμού, για να αποφύγουμε (πχ) αρκετό
  διπλότυπο κώδικα (με μικροδιαφορές)
- Οποιαδήποτε Όψη (View) χρησιμοποιούμε, πρακτικά κάνει 'JOIN' το 'AccountTable'
  με κάποιο άλλο πίνακα που έχει πληροφορίες χρήστη (Individual, Company, Merchant).
  Αυτό το κάνουμε ώστε να συσχετίσουμε τα (unique) κλειδιά του 'AccountTable' με
  το υπόλοιπο υλικό του κάθε χρήστη, συν ότι, έτσι καταφέρνουμε να αποφύγουμε την
  χρήση της 'JOIN' σε πολλές επερωτήσεις!
- Επιπρόσθετα, αν ένας 'Individual' κάνει "αγορά ως company", τότε, στον πίνακα
  των Transactions το 'client_id' θα είναι το id της εταιρείας στην οποία
  υπάγεται ο 'Individual'. Εδώ, το λάθος είναι ότι δεν αποθηκεύουμε ποιος χρήστης
  της εταιρείας κάνει την αγορά.
